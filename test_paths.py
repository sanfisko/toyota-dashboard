#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—É—Ç–µ–π
"""

import os
import sys
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from paths import paths

def test_paths():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—É—Ç–µ–π"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—É—Ç–µ–π ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç—è—Ö
    path_info = paths.get_info()
    
    print("\nüìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç—è—Ö:")
    for key, value in path_info.items():
        print(f"  {key}: {value}")
    
    print(f"\nüîç –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {paths.config_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    directories = [
        ('–î–∞–Ω–Ω—ã–µ', paths.data_dir),
        ('–õ–æ–≥–∏', paths.log_dir),
        ('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', paths.config_dir),
        ('–ö—ç—à', paths.cache_dir),
        ('–í—Ä–µ–º–µ–Ω–Ω–∞—è', paths.temp_dir),
    ]
    
    for name, directory in directories:
        exists = os.path.exists(directory)
        writable = os.access(directory, os.W_OK) if exists else False
        print(f"  {name}: {directory}")
        print(f"    –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if exists else '‚ùå'}")
        print(f"    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º–∞—è: {'‚úÖ' if writable else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    config_file = paths.config_file
    config_dir = os.path.dirname(config_file)
    
    print(f"  –ü—É—Ç—å: {config_file}")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config_dir}")
    print(f"  –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if os.path.exists(config_file) else '‚ùå'}")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if os.path.exists(config_dir) else '‚ùå'}")
    
    if os.path.exists(config_file):
        print(f"  –§–∞–π–ª —á–∏—Ç–∞–µ–º—ã–π: {'‚úÖ' if os.access(config_file, os.R_OK) else '‚ùå'}")
        print(f"  –§–∞–π–ª –∑–∞–ø–∏—Å—ã–≤–∞–µ–º—ã–π: {'‚úÖ' if os.access(config_file, os.W_OK) else '‚ùå'}")
    
    if os.path.exists(config_dir):
        print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ–º–∞—è: {'‚úÖ' if os.access(config_dir, os.W_OK) else '‚ùå'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\nüìù –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    log_file = paths.log_file
    log_dir = os.path.dirname(log_file)
    
    print(f"  –ü—É—Ç—å –∫ –ª–æ–≥—É: {log_file}")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {log_dir}")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if os.path.exists(log_dir) else '‚ùå'}")
    
    if os.path.exists(log_dir):
        print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ–º–∞—è: {'‚úÖ' if os.access(log_dir, os.W_OK) else '‚ùå'}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥-—Ñ–∞–π–ª
        try:
            test_log_file = os.path.join(log_dir, 'test.log')
            with open(test_log_file, 'w') as f:
                f.write('test log entry\n')
            os.remove(test_log_file)
            print(f"  ‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª —É—Å–ø–µ—à–µ–Ω")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª: {e}")
    else:
        print(f"  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"\nüß™ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        test_config = {
            'toyota': {
                'username': 'test@example.com',
                'password': 'test_password',
                'vin': 'TEST123456789',
                'region': 'europe'
            },
            'server': {
                'host': '0.0.0.0',
                'port': 2025
            }
        }
        
        import yaml
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(config_dir, exist_ok=True)
            
            with open(config_file, 'w', encoding='utf-8') as f:
                yaml.dump(test_config, f, default_flow_style=False, allow_unicode=True)
            
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤: {config_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ
            with open(config_file, 'r', encoding='utf-8') as f:
                loaded_config = yaml.safe_load(f)
            
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –∏–∑: {config_file}")
            
        except (OSError, PermissionError) as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Å—Ç–æ
            fallback_path = os.path.join(os.path.expanduser("~"), '.config', 'toyota-dashboard', 'config.yaml')
            try:
                os.makedirs(os.path.dirname(fallback_path), exist_ok=True)
                with open(fallback_path, 'w', encoding='utf-8') as f:
                    yaml.dump(test_config, f, default_flow_style=False, allow_unicode=True)
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Å—Ç–æ: {fallback_path}")
            except Exception as fallback_error:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Å—Ç–æ: {fallback_error}")
        
    except Exception as e:
        print(f"  ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")

if __name__ == "__main__":
    test_paths()